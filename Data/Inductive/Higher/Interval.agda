{-# OPTIONS --without-K #-}
module Data.Inductive.Higher.Interval where

open import Relation.Equality
open import Relation.Path.Operation

-- The interval, which we denote I, is perhaps an even simpler higher inductive type than the
-- circle generated by:
module Interval where
  private
    data #I : Set where
      #0 : #I
      #1 : #I

  I : Set
  I = #I

  -- A point 0ᵢ
  0ᵢ : I
  0ᵢ = #0

  -- A point 1₁
  1ᵢ : I
  1ᵢ = #1

  postulate -- A path segment
    path-seg : 0ᵢ ≡ 1ᵢ

  -- "The recursion principle for the interval says that given a type B along with
  interval-rec : ∀ {b} {B : Set b} →
                       (b₀ b₁ : B) → -- points b₀, b₁ and
                       (p : b₀ ≡ b₁) → -- a path b₀ ≡ b₁
                       (i : I) → B -- there is a function f : I → B such that
  interval-rec b₀ b₁ p #0 = b₀ -- f(0ᵢ) ≡ b₀
  interval-rec b₀ b₁ p #1 = b₁ -- f(1ᵢ) ≡ b₁"

  -- The induction principle says that given P : I → U along with
  interval-ind : ∀ {b} (P : I → Set b)
                       (b₀ : P 0ᵢ) → -- a point b₀ : P(0ᵢ) 
                       (b₁ : P 1ᵢ) → -- a point b₁ : P(1ᵢ) and
                       (p : transport {_}{_}{I}{P} path-seg b₀ ≡ b₁) →
                       ∀ i → P i -- there is a function f : Π(x:I) P(x) such that
  interval-ind P b₀ b₁ p #0 = b₀ -- f(0ᵢ) ≡ b₀
  interval-ind P b₀ b₁ p #1 = b₁ -- f(1ᵢ) ≡ b₁"
open Interval public

